{"pages":[{"title":"tags","text":"","link":"/tags/index.html"},{"title":"categories","text":"","link":"/categories/index.html"},{"title":"","text":"基本信息姓名：黄瑞伟 性别：男 出生年月：1997.5 联系方式：✆13123951238 ✉︎1625772204@qq.com 教育经历：暨阳学院(2015-2019) 本科 计算机科学与技术 职业技能熟悉PHP，熟悉Laravel框架，了解其底层原理 了解golang&amp;并发编程 熟悉MySQL 熟悉git以及gitflow工作流 工作&amp;项目经历 2019.09-2020.10 联川生物技术股份有限公司 PHP工程师 2018.11-2019.06 闲达网络科技（杭州）有限责任公司 后端实习生 2018.07-2018.10 浙江俊青汇信息技术有限公司 PHP实习生","link":"/about/index.html"}],"posts":[{"title":"docker的redis服务运行一段时间后无法连接","text":"问题描述没有更新过环境、代码，突然所有与redis有关的功能都出现报错。发现docker中redis服务虽然运行着，但是无法进入到容器中，也无法正常重启服务。 定位问题查看redis日志1234567891011121314[root@cloud ~]# docker logs xxx | less...1:M 17 Sep 2020 00:59:36.287 * 100 changes in 300 seconds. Saving...1:M 17 Sep 2020 00:59:36.690 * Background saving started by pid 1264712647:C 17 Sep 2020 01:00:26.706 # Write error saving DB on disk: No space left on device1:M 17 Sep 2020 01:00:27.646 # Background saving error1:M 17 Sep 2020 01:00:27.746 * 100 changes in 300 seconds. Saving...1:M 17 Sep 2020 01:00:28.243 * Background saving started by pid 1264812648:C 17 Sep 2020 01:01:06.715 # Write error saving DB on disk: No space left on device1:M 17 Sep 2020 01:01:07.749 # Background saving error1:M 17 Sep 2020 01:01:07.850 * 100 changes in 300 seconds. Saving...1:M 17 Sep 2020 01:01:08.348 * Background saving started by pid 1264912649:C 17 Sep 2020 01:01:46.865 # Write error saving DB on disk: No space left on device1:M 17 Sep 2020 01:01:47.763 # Background saving error 大概意思是持久化时存储位置磁盘空间不足导致写入错误。 查看存储位置以及剩余空间余量1234567[root@cloud ~]# docker info | less...Docker Root Dir: /mnt/data2/Container/docker...[root@cloud ~]# docker infoFilesystem Size Used Avail Use% Mounted on/dev/nvme0n1 477G 475G 2.3G 100% /mnt/data2 可以看到已经无剩余的空间了 解决办法 修改redis.conf持久化存储路径docker安装的redis默认是没有配置文件的，修改还要加redis.conf配置文件、映射外部路径到容器等操作，比较麻烦。 存储扩容 修改docker的Docker Root Dir 12345678910[root@cloud ~]# vi /etc/docker/daemon.json{ &quot;data-root&quot;: &quot;/cloud/docker&quot;}[root@cloud ~]# systemctl daemon-reload[root@cloud ~]# systemctl restart docker.service[root@cloud ~]# docker info | less...Docker Root Dir: /cloud/docker... 直接修改docker的根目录，但是无法使用以前的镜像、容器等,所以此方法不推荐 使用软连接1234[root@cloud ~]# cp -rf /mnt/data2/Container/docker/* /cloud/docker/[root@cloud ~]# rm -rf /mnt/data2/Container/docker[root@cloud ~]# ln -s /cloud/docker/ /mnt/data2/Container/docker[root@cloud ~]# systemctl restart docker.service 数据完美迁移，能保留数据，也不用改配置，而且操作也简单，推荐！","link":"/2020/09/17/docker%E7%9A%84redis%E6%9C%8D%E5%8A%A1%E8%BF%90%E8%A1%8C%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E5%90%8E%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5/"},{"title":"解决php突然无法上传文件问题","text":"问题描述今天收到网站所有文件都无法上传的反馈，昨天还好好的，也没有更新过环境和代码。先调试打印上传的文件，发现只能获取到文件名，但是所有其他参数都为空。 查看Nginx日志，有如下报错： 12[error] 4197#0: *109393 FastCGI sent in stderr: &quot;PHP message: PHP Warning: File upload error - unable to create a temporary file in Unknown on line 0 解决办法有错误信息一般就解决了一半问题了，谷歌走起： 排除是否为tmp目录问题php上传文件会先放入tmp目录，所以运行Nginx的用户必须有写入权限，可使用如下代码获取PHP的tmp目录：12$tmp_dir = ini_get('upload_tmp_dir') ? ini_get('upload_tmp_dir') : sys_get_temp_dir();die($tmp_dir); #一般情况是/tmp 检查tmp目录是否为777权限 检查tmp目录是否有足够的空间。 重启nginx和php-fpm1sudo systemctl restart php-fpm nginx 我的tmp目录满足条件，用方法2解决了问题，但是具体原因未知…","link":"/2020/09/22/%E8%A7%A3%E5%86%B3php%E7%AA%81%E7%84%B6%E6%97%A0%E6%B3%95%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E9%97%AE%E9%A2%98/"},{"title":"钓鱼QTE消块顺序查找","text":"最近玩某手游，其钓鱼功能非常反人类，手动钓鱼一直要手点，非常伤神，但自动挂机钓鱼收益低不说，还要一直在线，鬼才设计师，有这资源优化下网络不好吗？遂尝试着做一个自动化钓鱼脚本，以前听说过按键精灵，但是要重新学习语言，且环境封闭，经过一番了解后，选择了更加强大的auto.js，有开源的免费版本，也有付费的pro版本。所有点点点的游戏自动脚本逻辑基本就是识图、取色、操作，但是钓鱼时会出现消块QTE，虽然不消或消错不会直接钓鱼失败，但是会大大影响钓鱼效率，所以要让脚本正确识别，就需要经过一些计算找出找出正确的消块顺序。 part1：qte消块栏，分出现红绿蓝三种方块，每个颜色排序随机，数量为1-3个不等。part2：块存储栏，同样是红绿蓝三种颜色的块，共8个块，各个颜色块的数量一定是满足上面的消块条件，相邻的同色块只要其中之一被消除则一起被消除，块消除后，空出的栏位会被左边的块填补。 解决方式通过简单的分析，可以看出这是一个深度为3的深搜问题（DFS）,依次寻找满足QTE三部分块的位置，用一个数组模拟栈来存储消块顺序的位置，可能同时会有多个符合当前QTE的消块方式，当找到符合位置时，入栈，然后继续查找下部分QTE的位置，直到找到三部分QTE块的位置，如果过程中没有找到符合的消块位置，则上一个找到的位置为错误位置，出栈，继续寻找符合的QTE的消块位置。 123456789101112131415161718192021222324252627//找到消块QTE顺序//qteBlockColor array qte方块的颜色以及排列 例：[&quot;rr&quot;,&quot;g&quot;,&quot;bbb&quot;]//i int 第几部分的qte（深度）//blockColor string 方块栏的方块颜色以及排列//order array 消块顺序，例:[4,5,1]function getBlockClickOrder(qteBlockColor, i, blockColor, order) { var pos = 0 while (pos &lt;= blockColor.length) { qbc = qteBlockColor[i] index = blockColor.indexOf(qbc, pos) if (index &lt; 0 || blockColor[index-1]==qbc[0] || blockColor[index+qbc.length]==qbc[0]) { order.pop() return order } pos = index + 1 order.push(index) if (order.length &gt;= 3) { return order } newBlockColor = blockColor.substring(0, index) + blockColor.substring(index + qteBlockColor[i].length) order = getBlockClickOrder(qteBlockColor, i + 1, newBlockColor, order) if (order.length &gt;= 3) { break; } } return order}s","link":"/2020/10/09/%E9%92%93%E9%B1%BCQTE%E6%B6%88%E5%9D%97%E9%A1%BA%E5%BA%8F%E6%9F%A5%E6%89%BE/"}],"tags":[{"name":"Docker","slug":"Docker","link":"/tags/Docker/"},{"name":"Redis","slug":"Redis","link":"/tags/Redis/"},{"name":"PHP","slug":"PHP","link":"/tags/PHP/"},{"name":"Nginx","slug":"Nginx","link":"/tags/Nginx/"},{"name":"算法","slug":"算法","link":"/tags/%E7%AE%97%E6%B3%95/"},{"name":"auto.js","slug":"auto-js","link":"/tags/auto-js/"},{"name":"CQ","slug":"CQ","link":"/tags/CQ/"}],"categories":[]}